1. Сортировка выбором
Задача 1: Напишите функцию, которая принимает массив целых чисел и сортирует его с помощью алгоритма сортировки выбором. Например, для входного массива [5, 3, 8] результат должен быть [3, 5, 8].
Задача 2: Реализуйте сортировку выбором для массива строк. Например, для входного массива ["banana", "apple", "kiwi"] результат должен быть ["kiwi", "apple", "banana"].

2. Массивы и связанные списки
Задача 1: Создайте класс для связанного списка и реализуйте метод для добавления элемента в конец списка. Например, добавьте элементы 1, 2, 3 в список.
Задача 2: Напишите функцию, которая принимает массив чисел и возвращает связанный список, содержащий те же числа. Например, для массива [1, 2, 3] результат должен быть связанным списком с элементами 1, 2, 3.

3. Рекурсия
Задача 1: Напишите рекурсивную функцию, которая вычисляет n-й член последовательности Фибоначчи. Например, для n = 5 результат должен быть 5.
Задача 2: Реализуйте рекурсивную функцию для вычисления суммы всех элементов массива. Например, для массива [1, 2, 3] результат должен быть 6.

4. Стек
Задача 1: Реализуйте стек с операциями push и pop. Например, добавьте элементы 1, 2, 3 и удалите один элемент.
Задача 2: Напишите программу, которая проверяет, является ли строка с круглой скобкой сбалансированной. Например, строка "()" должна вернуть true, а строка "(" — false.

5. Поиск в ширину
Задача 1: Реализуйте алгоритм поиска в ширину для простого графа. Например, найдите все вершины, достижимые от начальной вершины.
Задача 2: Напишите программу, которая находит все вершины, достижимые из заданной вершины в неориентированном графе, без блокировок. Например, если граф имеет вершины A, B, C, D, программа должна вернуть все вершины, начиная с A.

6. Пузырьковая сортировка
Задача 1: Реализуйте пузырьковую сортировку для массива целых чисел. Например, для массива [5, 3, 8] результат должен быть [3, 5, 8].
Задача 2: Напишите функцию, которая сортирует массив строк в порядке убывания. Например, для массива ["pear", "apple", "orange"] результат должен быть ["pear", "orange", "apple"].

7. Бинарный поиск
Задача 1: Напишите функцию, которая выполняет бинарный поиск в отсортированном массиве. Например, для массива [1, 2, 3] и искомого элемента 2 результат должен быть 1 (индекс).
Задача 2: Реализуйте бинарный поиск, который возвращает -1, если элемент не найден. Например, для массива [10, 20, 30] и искомого элемента 25 результат должен быть -1.

8. Алгоритм Дейкстра
Задача 1: Реализуйте алгоритм Дейкстра для нахождения кратчайшего пути в простом графе. Например, найдите кратчайший путь от одной вершины к другой.
Задача 2: Напишите программу, которая находит кратчайшие расстояния от одной вершины до всех остальных в графе с положительными весами.

9. Задача составления расписания
Задача 1: Напишите программу, которая принимает список задач с временными интервалами и возвращает количество задач, которые можно выполнить без перекрытия.
Задача 2: Реализуйте алгоритм, который находит оптимальное расписание для заданного набора задач без сложных ограничений.

10. Задача о рюкзаке
Задача 1: Напишите программу, которая решает задачу о рюкзаке с использованием простого подхода. У вас есть несколько предметов с весами и ценами.
Задача 2: Реализуйте жадный алгоритм для решения задачи о рюкзаке с неразрезными предметами.

11. Приближенные алгоритмы
Задача 1: Напишите приближенный алгоритм для задачи о коммивояжере, используя простой подход.
Задача 2: Реализуйте алгоритм, который использует метод проб для приближенного решения задачи о коммивояжере.

12. Алгоритм K ближайших соседей
Задача 1: Напишите реализацию алгоритма K ближайших соседей для классификации точек в двумерном пространстве.
Задача 2: Реализуйте KNN для регрессии, где необходимо предсказать значение на основе K ближайших соседей.

13. Деревья
Задача 1: Создайте бинарное дерево поиска и реализуйте функции для вставки узлов. Например, вставьте узлы 5, 3, 7.
Задача 2: Реализуйте алгоритм обхода бинарного дерева (прямой обход) и напишите тесты для проверки правильности работы.
